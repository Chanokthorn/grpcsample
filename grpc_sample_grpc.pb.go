// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcsample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcSampleClient is the client API for GrpcSample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSampleClient interface {
	Ping(ctx context.Context, in *PongIn, opts ...grpc.CallOption) (*PongOut, error)
}

type grpcSampleClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSampleClient(cc grpc.ClientConnInterface) GrpcSampleClient {
	return &grpcSampleClient{cc}
}

func (c *grpcSampleClient) Ping(ctx context.Context, in *PongIn, opts ...grpc.CallOption) (*PongOut, error) {
	out := new(PongOut)
	err := c.cc.Invoke(ctx, "/grpcsample.GrpcSample/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSampleServer is the server API for GrpcSample service.
// All implementations must embed UnimplementedGrpcSampleServer
// for forward compatibility
type GrpcSampleServer interface {
	Ping(context.Context, *PongIn) (*PongOut, error)
	mustEmbedUnimplementedGrpcSampleServer()
}

// UnimplementedGrpcSampleServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcSampleServer struct {
}

func (*UnimplementedGrpcSampleServer) Ping(context.Context, *PongIn) (*PongOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGrpcSampleServer) mustEmbedUnimplementedGrpcSampleServer() {}

func RegisterGrpcSampleServer(s *grpc.Server, srv GrpcSampleServer) {
	s.RegisterService(&_GrpcSample_serviceDesc, srv)
}

func _GrpcSample_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSampleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.GrpcSample/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSampleServer).Ping(ctx, req.(*PongIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcSample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsample.GrpcSample",
	HandlerType: (*GrpcSampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GrpcSample_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcsample/grpc_sample.proto",
}
